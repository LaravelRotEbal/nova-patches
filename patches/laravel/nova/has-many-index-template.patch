@package laravel/nova

--- /dev/null
+++ resources/js/components/Index/HasManyField.vue
@@ -0,0 +1,24 @@
+<template>
+  <div :class="`text-${field.textAlign}`">
+    <template v-if="hasValue">
+      <div v-if="field.asHtml" v-html="field.value"></div>
+      <span v-else class="whitespace-no-wrap">{{ field.value }}</span>
+    </template>
+    <p v-else>&mdash;</p>
+  </div>
+</template>
+
+<script>
+export default {
+  props: ['resourceName', 'field'],
+
+  computed: {
+    /**
+     * Determine if the field has a value other than null.
+     */
+    hasValue() {
+      return this.field.value !== null
+    },
+  },
+}
+</script>

--- resources/js/fields.js	(date 1579516530774)
+++ resources/js/fields.js	(date 1579516530774)
@@ -95,6 +95,7 @@

 // Has Many Field...
 Vue.component('detail-has-many-field', require('./components/Detail/HasManyField.vue'))
+Vue.component('index-has-many-field', require('./components/Index/HasManyField.vue'))

 // Belongs To Field...
 Vue.component('index-belongs-to-field', require('./components/Index/BelongsToField.vue'))



--- src/Fields/HasMany.php	(date 1579511247236)
+++ src/Fields/HasMany.php	(date 1579511247236)
@@ -3,6 +3,7 @@
 namespace Laravel\Nova\Fields;

 use Illuminate\Http\Request;
+use Illuminate\Support\Collection;
 use Illuminate\Support\Str;
 use Laravel\Nova\Contracts\ListableField;
 use Laravel\Nova\Contracts\RelatableField;
@@ -115,4 +116,43 @@
             'singularLabel' => $this->singularLabel ?? Str::singular($this->name),
         ], parent::jsonSerialize());
     }
+
+
+
+    /**
+     * @return \App\Fields\HasMany
+     */
+    public function indexNone() : self {
+        $this->displayCallback = null;
+
+        return $this;
+    }
+
+
+
+    /**
+     * @return self
+     */
+    public function indexCount() : self {
+        $this->displayCallback = static function(Collection $value) {
+            return $value->count();
+        };
+
+        return $this;
+    }
+
+
+
+    /**
+     * @param $column
+     *
+     * @return self
+     */
+    public function indexPluck($column) : self {
+        $this->displayCallback = static function(Collection $value) use($column) {
+            return $value->pluck($column)->implode(', ');
+        };
+
+        return $this;
+    }
 }
